{"version":3,"sources":["model/CalculationToken.ts","model/Calculator.ts","components/CalculatorButton.tsx","components/CalculatorView.tsx","components/Metrics.tsx","App.tsx"],"names":["CalculationToken","type","value","canBeAfter","previous","canBeFirst","canBeLast","canBeUnary","isNumber","leftPriority","rightPriority","this","text","isNaN","parseFloat","Error","CalculatorError","message","position","performOperation","operationToken","left","right","Math","pow","calculate","expression","leftStack","rightStack","tokens","numberChars","bracketsCount","unary","checkToken","token","length","processNumber","numberText","join","pop","numberToken","parse","push","i","symbol","match","undefined","accumulator","scroll","newToken","toString","shift","leftToken","rightToken","delta","operation","leftOperand","result","error","console","log","CalculatorButton","icon","style","columns","onPress","extraStyle","styles","actionButton","numberButton","TouchableOpacity","View","button","height","width","Text","StyleSheet","create","display","alignItems","justifyContent","textAlignVertical","textAlign","borderRadius","margin","fontSize","backgroundColor","color","Row","children","row","nonRepeatingOperators","CalculatorView","useState","input","setInput","setExpression","continueWithResult","values","split","map","x","trimEnd","makeFunctionButtonAction","expressionValue","includes","trimmedExpression","lastSymbol","substring","ActionButton","other","NumberButton","number","inputValue","prev","String","FunctionButton","inputContainer","inputView","TextInput","inputMain","separator","history","trimmed","name","size","buttonsContainer","spacer","flex","flexDirection","marginBottom","marginRight","marginVertical","Metrics","dangerouslySetInnerHTML","__html","App","container"],"mappings":"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","file":"static/js/app.7dbd020a.chunk.js","sourcesContent":["type ICalculationTokenType =\n    | 'plus'\n    | 'minus'\n    | 'multiply'\n    | 'divide'\n    | 'mod'\n    | 'pow'\n    | 'leftBracket'\n    | 'rightBracket'\n    | 'number';\n\nexport class CalculationToken {\n    type: ICalculationTokenType;\n    value?: string;\n\n    constructor(type: ICalculationTokenType, value?: string) {\n        this.type = type;\n        this.value = value;\n    }\n\n    public get a() : string {\n        return this.value\n    }\n    \n\n    static parse(text: string) {\n        switch (text) {\n            case '+':\n                return new this('plus', text);\n            case '-':\n                return new this('minus', text);\n            case '*':\n                return new this('multiply', text);\n            case '/':\n                return new this('divide', text);\n            case '%':\n                return new this('mod', text);\n            case '^':\n                return new this('pow', text);\n            case '(':\n                return new this('leftBracket', text);\n            case ')':\n                return new this('rightBracket', text);\n\n            default:\n                if (isNaN(parseFloat(text))) {\n                    throw new Error(`Can't parse \"${text}\" as number token`);\n                }\n                return new this('number', text);\n        }\n    }\n\n    canBeAfter = (previous?: CalculationToken) => {\n        if (previous == null) {\n            return this.canBeFirst();\n        }\n        switch (this.type) {\n            case 'leftBracket':\n            case 'number':\n                switch (previous.type) {\n                    case 'rightBracket':\n                    case 'number':\n                        return false;\n                    default:\n                        return true;\n                }\n            case 'multiply':\n            case 'divide':\n            case 'mod':\n            case 'pow':\n            case 'rightBracket':\n                switch (previous.type) {\n                    case 'rightBracket':\n                    case 'number':\n                        return true;\n                    default:\n                        return false;\n                }\n            case 'plus':\n            case 'minus':\n                switch (previous.type) {\n                    case 'leftBracket':\n                    case 'rightBracket':\n                    case 'number':\n                        return true;\n                    default:\n                        return false;\n                }\n        }\n    };\n\n    canBeFirst = () => {\n        switch (this.type) {\n            case 'plus':\n            case 'minus':\n            case 'leftBracket':\n            case 'number':\n                return true;\n            case 'multiply':\n            case 'divide':\n            case 'mod':\n            case 'pow':\n            case 'rightBracket':\n                return false;\n        }\n    };\n\n    canBeLast = () => {\n        switch (this.type) {\n            case 'rightBracket':\n            case 'number':\n                return true;\n            default:\n                return false;\n        }\n    };\n\n    canBeUnary = () => {\n        switch (this.type) {\n            case 'minus':\n            case 'plus':\n                return true;\n            default:\n                return false;\n        }\n    };\n\n    isNumber = () => this.type == 'number';\n\n    leftPriority = () => {\n        switch (this.type) {\n            case 'plus':\n            case 'minus':\n                return 2;\n            case 'multiply':\n            case 'divide':\n            case 'mod':\n                return 4;\n            case 'pow':\n                return 5;\n            default:\n                return 0;\n        }\n    };\n\n    rightPriority = () => {\n        switch (this.type) {\n            case 'plus':\n            case 'minus':\n                return 1;\n            case 'multiply':\n            case 'divide':\n            case 'mod':\n                return 3;\n            case 'pow':\n                return 6;\n            default:\n                return 0;\n        }\n    };\n}\n","import { CalculationToken } from './CalculationToken';\n\nclass CalculatorError extends Error {\n    message: string;\n    position?: number;\n    constructor(message: string, position?: number) {\n        super();\n        this.message = message;\n        this.position = position;\n    }\n}\n\nconst parse: (expression: string) => CalculationToken[] = (expression) => {\n    let tokens: CalculationToken[] = [];\n    let previous: CalculationToken | null = null;\n    let numberChars: string[] = [];\n    let bracketsCount = 0;\n    let unary = false;\n\n    const checkToken = (token: CalculationToken, position: number) => {\n        if (!previous) {\n            if (!token.canBeFirst()) {\n                throw new CalculatorError(`Token ${token} can't be first`, position);\n            }\n        } else if (!token.canBeAfter(previous)) {\n            throw new CalculatorError(`Token ${token} can't be after ${previous.type}`, position);\n        }\n        if (position == expression.length - 1 && !token.canBeLast()) {\n            throw new CalculatorError(`Token ${token} can't be last`, position);\n        }\n    };\n\n    const processNumber = (position: number) => {\n        let numberText = numberChars.join('');\n        if (previous?.type == 'minus' && unary) {\n            numberText = `-${numberText}`;\n            tokens.pop();\n            previous = null;\n            unary = false;\n        }\n        const numberToken = CalculationToken.parse(numberText);\n        if (!numberToken) {\n            throw new CalculatorError(\n                `Failed to initialize number token from \"${numberText}\"`,\n                position,\n            );\n        }\n        checkToken(numberToken, position);\n        tokens.push(numberToken);\n        previous = numberToken;\n        numberChars = [];\n    };\n\n    for (let i = 0; i < expression.length; i++) {\n        const symbol = expression[i];\n        if (symbol == ' ') {\n            continue;\n        }\n        if (symbol.match(/\\d/) || symbol == '.') {\n            numberChars.push(symbol);\n            continue;\n        }\n        if (numberChars.length > 0) {\n            processNumber(i);\n        }\n        const token = CalculationToken.parse(symbol);\n        if (!token) {\n            throw new CalculatorError(`Unsupported symbol \"${symbol}\"`, i);\n        }\n        switch (token.type) {\n            case 'minus':\n                switch (previous?.type) {\n                    case 'leftBracket':\n                    case 'pow':\n                    case null:\n                    case undefined:\n                        unary = true;\n                        break;\n                    default:\n                        unary = false;\n                        break;\n                }\n                break;\n            case 'leftBracket':\n                bracketsCount += 1;\n                break;\n            case 'rightBracket':\n                bracketsCount -= 1;\n                break;\n            default:\n                break;\n        }\n        if (bracketsCount < 0) {\n            throw new CalculatorError('Closed brackets more than opened', i);\n        }\n        checkToken(token, i);\n        tokens.push(token);\n        previous = token;\n    }\n    if (numberChars.length > 0) {\n        processNumber(expression.length - 1);\n    }\n    if (bracketsCount > 0) {\n        throw new CalculatorError('Opened brackets more than closed', expression.length - 1);\n    }\n\n    return tokens;\n};\n\nconst performOperation = (operationToken: CalculationToken, left: number, right: number) => {\n    switch (operationToken.type) {\n        case 'plus':\n            return left + right;\n        case 'minus':\n            return left - right;\n        case 'multiply':\n            return left * right;\n        case 'divide':\n            return left / right;\n        case 'mod':\n            return left % right;\n        case 'pow':\n            return Math.pow(left, right);\n        case 'leftBracket':\n        case 'rightBracket':\n        case 'number':\n            throw Error(`${operationToken.type} is not operationToken`);\n    }\n};\n\nexport const calculate = (expression: string) => {\n    try {\n        let leftStack: CalculationToken[] = [];\n        let rightStack = parse(expression);\n        let accumulator: number | null = null;\n\n        const scroll = () => {\n            const accumulatedValue = accumulator;\n            if (accumulatedValue !== null) {\n                const newToken = new CalculationToken('number', accumulatedValue.toString());\n                leftStack = [newToken, ...leftStack];\n                accumulator = null;\n            }\n            do {\n                if (rightStack.length == 0) {\n                    return;\n                }\n                const token = rightStack.shift();\n                switch (token.type) {\n                    case 'number':\n                        accumulator = parseFloat(token.value);\n                        return;\n                    default:\n                        leftStack = [token, ...leftStack];\n                        break;\n                }\n            } while (true);\n        };\n\n        scroll();\n        while (true) {\n            let leftToken = leftStack[0];\n            const rightToken = rightStack[0];\n            let delta = (leftToken?.leftPriority() ?? 0) - (rightToken?.rightPriority() ?? 0);\n            if (leftToken && delta > 0) {\n                const operation = leftStack.shift();\n                const leftOperand = leftStack.shift();\n                switch (leftOperand.type) {\n                    case 'number':\n                        const value = parseFloat(leftOperand.value);\n                        const result = performOperation(operation, value, accumulator ?? 0);\n                        accumulator = result;\n                        leftToken = leftStack[0];\n                        delta =\n                            (leftToken?.leftPriority() ?? 0) - (rightToken?.rightPriority() ?? 0);\n                        break;\n                    default:\n                        throw new Error(`Left operand ${leftOperand.type} is not number`);\n                }\n            }\n            if (rightToken && rightToken?.type !== 'number' && delta < 0) {\n                scroll();\n            }\n            if (leftToken?.type == 'leftBracket' && rightToken?.type == 'rightBracket') {\n                leftStack.shift();\n                rightStack.shift();\n            }\n            if (leftStack.length == 0 && rightStack.length == 0) {\n                break;\n            }\n        }\n\n        return accumulator;\n    } catch (error) {\n        console.log(error);\n        return 'Error';\n    }\n};\n","import React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nexport type IButtonProps = {\n    text?: string;\n    icon?: JSX.Element;\n    style?: 'action' | 'number';\n    columns?: number;\n    onPress?: () => any;\n};\n\nexport const CalculatorButton: React.FC<IButtonProps> = ({\n    text,\n    icon,\n    style = 'number',\n    columns = 1,\n    onPress = () => {},\n}) => {\n    const extraStyle = style == 'action' ? styles.actionButton : styles.numberButton;\n\n    return (\n        <TouchableOpacity onPress={onPress}>\n            <View style={[styles.button, extraStyle, { height: 85, width: columns * 85 + (columns - 1) * 10 }]}>\n                <Text style={extraStyle}>{icon ? icon : text}</Text>\n            </View>\n        </TouchableOpacity>\n    );\n};\n\nconst styles = StyleSheet.create({\n    button: {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        textAlignVertical: 'center',\n        textAlign: 'center',\n        borderRadius: 45,\n        margin: 5,\n    },\n    actionButton: {\n        fontSize: 30,\n        backgroundColor: '#285FF5',\n        color: 'white',\n    },\n    numberButton: {\n        fontSize: 30,\n        backgroundColor: '#D6E2FC',\n    },\n});\n","import { FontAwesome5 as Icon } from '@expo/vector-icons';\nimport React, { useState } from 'react';\nimport { StyleSheet, Text, TextInput, View } from 'react-native';\nimport { calculate } from '../model/Calculator';\nimport { CalculatorButton, IButtonProps } from './CalculatorButton';\n\nconst Row: React.FC = ({ children }) => {\n    return <View style={styles.row}>{children}</View>;\n};\n\nconst nonRepeatingOperators = ['+', '-', '/', '*'];\n\nexport const CalculatorView: React.FC = () => {\n    const [input, setInput] = useState('0');\n    const [expression, setExpression] = useState('0');\n\n    const clearAction = () => {\n        setInput('0');\n        setExpression('0');\n    };\n\n    const makeNumberButtonAction = (number: string) => {\n        return () => {\n            const inputValue = expression.includes('=') ? '0' : input;\n            const expressionValue = expression.includes('=') ? '0' : expression;\n\n            if (inputValue == '0') {\n                if (number == '.') {\n                    // If expression ends with operator then append zero\n                    const trimmedExpression = expressionValue.trimEnd();\n                    if (\n                        trimmedExpression.length > 0 &&\n                        nonRepeatingOperators.includes(\n                            String(trimmedExpression[trimmedExpression.length - 1]),\n                        )\n                    ) {\n                        setExpression((prev) => prev + '0');\n                    }\n                } else {\n                    // Replace zero by digit 1-9\n                    setInput(number);\n                    setExpression((prev) => (expressionValue == '0' ? number : prev + number));\n                    return;\n                }\n            }\n            // Ignore duplicate decimal delimiter sign\n            if (inputValue.includes('.') && number == '.') {\n                return;\n            }\n            setInput((prev) => prev + number);\n            setExpression((prev) => prev + number);\n        };\n    };\n\n    const continueWithResult = () => {\n        const values = expression.split('=').map((x) => x.trimEnd());\n        const value = values[values.length - 1] ?? '0';\n        setExpression(value);\n        return value;\n    };\n\n    const makeFunctionButtonAction = (text: string) => {\n        return () => {\n            // if expression contains calculation result then continue with result\n            let expressionValue = expression.includes('=') ? continueWithResult() : expression;\n\n            if (nonRepeatingOperators.includes(text)) {\n                let trimmedExpression = expressionValue.trimEnd();\n                let lastSymbol = trimmedExpression[trimmedExpression.length - 1];\n                // if expression ends with the same operator then ignore it\n                if (lastSymbol == text) {\n                    return;\n                }\n                // if expression ends with other operator then replace it\n                if (nonRepeatingOperators.includes(lastSymbol)) {\n                    expressionValue = trimmedExpression\n                        .substring(0, trimmedExpression.length - 1)\n                        .trimEnd();\n                }\n            }\n\n            if (expressionValue == '0' && text == '-') {\n                setInput('-');\n                setExpression('-');\n                return;\n            }\n\n            if (expressionValue == '') {\n                expressionValue = '0';\n            }\n\n            setExpression(expressionValue + ` ${text} `);\n            setInput('0');\n        };\n    };\n\n    const deleteAction = () => {\n        if (expression.includes('=')) {\n            continueWithResult();\n        }\n\n        if (input.length > 1) {\n            setInput(input.substring(0, input.length - 1));\n        } else {\n            setInput('0');\n        }\n\n        if (expression.length > 1) {\n            let trimmed = expression.trimEnd();\n            setExpression(trimmed.substring(0, trimmed.length - 1).trimEnd());\n        } else {\n            setExpression('0');\n        }\n    };\n\n    const evaluateAction = () => {\n        if (expression.includes('=')) {\n            return;\n        }\n        // If expression ends with operator then append zero\n        let trimmedExpression = expression.trimEnd();\n        if (\n            trimmedExpression.length > 0 &&\n            nonRepeatingOperators.includes(trimmedExpression[trimmedExpression.length - 1])\n        ) {\n            setExpression((prev) => prev + '0');\n        }\n        let result = calculate(expression);\n        setInput(`${result}`);\n        setExpression((prev) => prev + ` = ${result}`);\n    };\n\n    const ActionButton: React.FC<IButtonProps> = ({ text, style = 'action', ...other }) => (\n        <CalculatorButton text={text} style={style} {...other} />\n    );\n    const NumberButton: React.FC<IButtonProps> = ({ text, style = 'number', ...other }) => (\n        <CalculatorButton\n            text={text}\n            style={style}\n            onPress={makeNumberButtonAction(text)}\n            {...other}\n        />\n    );\n    const FunctionButton: React.FC<IButtonProps> = ({ text, style = 'action', ...other }) => (\n        <CalculatorButton\n            text={text}\n            style={style}\n            onPress={makeFunctionButtonAction(text)}\n            {...other}\n        />\n    );\n    const iconSize = 30;\n\n    return (\n        <View>\n            <View style={styles.inputContainer}>\n                <View style={styles.inputView}>\n                    <TextInput style={styles.inputMain} value={input} />\n                    <View style={styles.separator} />\n                    <Text style={styles.history}>{expression}</Text>\n                </View>\n                <ActionButton\n                    onPress={deleteAction}\n                    icon={<Icon name=\"backspace\" size={iconSize} />}\n                />\n            </View>\n            <View style={styles.buttonsContainer}>\n                <Row>\n                    <ActionButton\n                        onPress={clearAction}\n                        icon={<Icon name=\"trash\" size={iconSize} />}\n                    />\n                    <NumberButton text=\"(\" style=\"action\" />\n                    <NumberButton text=\")\" style=\"action\" />\n                    <FunctionButton text=\"/\" icon={<Icon name=\"divide\" size={iconSize} />} />\n                </Row>\n                <Row>\n                    <NumberButton text=\"7\" />\n                    <NumberButton text=\"8\" />\n                    <NumberButton text=\"9\" />\n                    <FunctionButton text=\"*\" icon={<Icon name=\"times\" size={iconSize} />} />\n                </Row>\n                <Row>\n                    <NumberButton text=\"4\" />\n                    <NumberButton text=\"5\" />\n                    <NumberButton text=\"6\" />\n                    <FunctionButton text=\"-\" icon={<Icon name=\"minus\" size={iconSize} />} />\n                </Row>\n                <Row>\n                    <NumberButton text=\"1\" />\n                    <NumberButton text=\"2\" />\n                    <NumberButton text=\"3\" />\n                    <FunctionButton text=\"+\" icon={<Icon name=\"plus\" size={iconSize} />} />\n                </Row>\n                <Row>\n                    <NumberButton text=\"0\" columns={2} />\n                    <NumberButton text=\".\" />\n                    <ActionButton\n                        text=\"=\"\n                        onPress={evaluateAction}\n                        icon={<Icon name=\"equals\" size={iconSize} />}\n                    />\n                </Row>\n            </View>\n        </View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    spacer: {\n        flex: 1,\n    },\n    inputContainer: {\n        display: 'flex',\n        flexDirection: 'row',\n        alignItems: 'center',\n        marginBottom: 20,\n        width: 380,\n    },\n    inputView: {\n        flex: 1,\n        marginRight: 20,\n    },\n    inputMain: {\n        fontSize: 30,\n        textAlign: 'right',\n    },\n    history: {\n        textAlign: 'right',\n        fontSize: 20,\n    },\n    separator: {\n        height: 1,\n        backgroundColor: '#CCCCCC',\n        marginVertical: 5,\n    },\n    buttonsContainer: {\n        marginBottom: 30,\n    },\n    row: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center',\n    },\n});\n","import React from 'react';\n\nexport const Metrics: React.FC = () => {\n    return (\n        <div\n            dangerouslySetInnerHTML={{\n                __html: `\n            <script type=\"text/javascript\">\n                (function(m,e,t,r,i,k,a){m[i]=m[i]||function(){(m[i].a=m[i].a||[]).push(arguments)};\n                m[i].l=1*new Date();k=e.createElement(t),a=e.getElementsByTagName(t)[0],k.async=1,k.src=r,a.parentNode.insertBefore(k,a)})\n                (window, document, \"script\", \"https://mc.yandex.ru/metrika/tag.js\", \"ym\");\n                ym(85048537, \"init\", {clickmap:true,trackLinks:true,accurateTrackBounce:true,webvisor:true});\n            </script>\n            <noscript><div><img src=\"https://mc.yandex.ru/watch/85048537\" style=\"position:absolute; left:-9999px;\" alt=\"\" /></div></noscript>`,\n            }}\n        />\n    );\n};\n","import React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { CalculatorView } from './components/CalculatorView';\nimport { Metrics } from './components/Metrics';\n\nexport default function App() {\n    return (\n        <View style={styles.container}>\n            <View style={styles.spacer}></View>\n            <CalculatorView />\n            <Metrics />\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        justifyContent: 'center',\n        alignItems: 'center',\n    },\n    spacer: {\n        flex: 1,\n    },\n});\n"],"sourceRoot":""}